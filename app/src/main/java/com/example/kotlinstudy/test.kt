package com.example.kotlinstudy

// 스코프함수

// 람다함수의 특별한 케이스
// 1. 람다함수도 일반함수처럼 여러 구문 실행 가능
// 2. 패러미터가 없는 람다함수는 실행할 구문만 나열하면 됨
// 3. 패러미터가 하나뿐이라면 it을 사용

// 스코프함수 - 함수형 언어의 특징을 좀더 편리하게 사용할수 있도록 기본 제공하는 함수들
// 클래스에서 생성한 인스턴스를 스코프함수에 전달하면 인스턴스의 속성이나 함수를 스코프에서 좀더 편하게 사용할수 ㅇㅇ
// apply - 인스턴스 생성한후 변수에 담기 전에 초기화 과정을 수행할때 많이 쓰임
// run - 이미 인스턴스가 만들어진 후에 인스턴스의 함수나 속성을 스코프 내에서 사용해야할때 유용함
// with - run 과 동일한 기능을 가지지만 인스턴스를 참조연산자대신 패러미터로 받음
// also - (apply) - 처리가 끝나면 인스턴스를 반환, 패러미터로 인스턴스를 넘긴것처럼 it 을 통해서 인스턴스 사용 가능
// let - (run) - 처리가 끝나면 최종값을 반환, 패러미터로 인스턴스를 넘긴것처럼 it 을 통해서 인스턴스 사용 가능
fun main() {
    var price = 5000

    var a = Book("디모의 코틀린", 10000).apply{
        name = "[초특가]" + name
        discount()
    }

    a.run {
        println("상품명: ${name}, 가격: ${price}원")
    }
    a.let {
        println("상품명: ${it.name}, 가격: ${it.price}원")
    }
}

class Book(var name: String, var price: Int){
    fun discount(){
        price -= 2000
    }
}
// 스코프함수는 인스턴스의 속성이나 함수를 스코프 내에서 깔끔하게 분리하여 사용할수있다는점때문에 코드의 가독성 향상시킬수잇음